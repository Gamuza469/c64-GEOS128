
; 30,31-08.2000, 1-09.2000, 6-09.2000, 20-22.09.2000, 14.07.2001
			;*=$e000
_HorizontalLine		JMP _HorizontalLine_		;e000
_InvertLine		JMP _InvertLine_		;e003
_RecoverLine		JMP _RecoverLine_		;e006
_VerticalLine		JMP _VerticalLine_		;e009
_Rectangle		JMP _Rectangle_			;e00c
_FrameRectangle		JMP _FrameRectangle_		;e00f
_InvertRectangle	JMP _InvertRectangle_		;e012
_RecoverRectangle	JMP _RecoverRectangle_		;e015
_DrawLine		JMP _DrawLine_			;e018
_DrawPoint		JMP _DrawPoint_			;e01b
_GetScanLine		JMP _GetScanLine_		;e01e
_TestPoint		JMP _TestPoint_			;e021
_BitmapUp		JMP _BitmapUp_			;e024
_UseSystemFont		JMP _UseSystemFont_		;e027
_GetRealSize		JMP _GetRealSize_		;e02a
_GetCharWidth		JMP _GetCharWidth_		;e02d
_LoadCharSet		JMP _LoadCharSet_		;e030
_ImprintRectangle	JMP _ImprintRectangle_		;e033
_BitmapClip		JMP _BitmapClip_		;e036
_BitOtherClip		JMP _BitOtherClip_		;e039
_InitTextPrompt		JMP _InitTextPrompt_		;e03c
_PromptOn		JMP _PromptOn_			;e03f
_PromptOff		JMP _PromptOff_			;e042
EE045			JMP _EE045_			;e045
Font_10			JMP _Font_10_			;e048
_TempHideMouse		JMP _TempHideMouse_		;e04b
_SetMousePicture	JMP _SetMousePicture_		;e04e
_BldGDirEntry		JMP _BldGDirEntry_		;e051
_SetColorMode		JMP _SetColorMode_		;e054
_ColorCard		JMP _ColorCard_			;e057
_ColorRectangle		JMP _ColorRectangle_		;e05a
SwapMemDiskDrv		JMP _SwapMemDiskDrv_		;e05d
_MoveBData		JMP _MoveBData_			;e060
EE063			JMP _EE063_			;e063
EE066			JMP _EE066_			;e066
_SwapBData		JMP _SwapBData_			;e069
_VerifyBData		JMP _VerifyBData_		;e06c
_DoBOp			JMP _DoBOp_			;e06f
_AccessCache		JMP _AccessCache_		;e072
_HideOnlyMouse		JMP _HideOnlyMouse_		;e075

;e078
; copies 40 bytes from (r0) -> $e00 (from above $1000? to bank 0)
_EE063_		JSR SetMMUShareBoth		;e078
		LDY #$27
EE07D		LDA (r0),y			;e07d
		STA E0E00,y
		DEY
		BPL EE07D
		JMP SetMMUShareTop

;e088
;A is the parameter, if it's =0 then "I:0" is sent to drive
;before exit to BASIC? BOOT?
_EE066_		PHA				;e088
		LDY #0
		STY r0L
		STY r1L
		STY r2L
		STY r3H
EE093		INY				;e093
		STY r3L
		LDA #$1c			;!!! hi-byte
		STA r0H
		STA r1H
		LDA #$64			;!!! hi-byte
		STA r2H
		JSR _MoveBData_
		SEI
		JSR SetMMUShareBoth
		+MoveB r5L, E0E2D
		LDY #2
EE0AE		LDA BASICspace,y			;e0ae
		STA E0E29,y
		DEY
		BPL EE0AE
		LDX #$e0
EE0B9		LDA EE0C6-1,x			;e0b9
		STA E0E2E-1,x
		DEX
		BNE EE0B9
		PLA
		JMP E0E2E
;this is copied to $0e2e - because KERNAL ROM is turned on
EE0C6		LDX #0				;e0c6
		STX config
		DEX
		TXS
		TAX
		BNE EE0F9
		LDA curDevice
		JSR $ffb1
		LDA #$ff
		JSR $ff93
		LDA #"I"
		JSR $ffa8
		LDA #":"
		JSR $ffa8
		LDA #"0"
		JSR $ffa8
		JSR $ffae
		LDA curDevice
		JSR $ffb1
		LDA #$ef
		JSR $ff93
		JSR $ffae
EE0F9		LDX #10				;e0f9
EE0FB		LDA $e04b,x			;e0fb something in KERNAL ROM
		STA mmu,x
		DEX
		BPL EE0FB
		STA E0A04
		;!!! is KERNAL or GEOS active now?
		JSR $e0cd
		JSR $e242
		JSR $e109
		JSR $f63d
		+LoadB E0A02, 0
		JSR $e093
		JSR $e056
		JSR $c000
		LDA E0E2D
		BEQ EE12A
		CLI
		JMP (E0A00)
EE12A		JSR $417a			;e12a
		JSR $4251
		JSR $4045
		JSR $419b
		LDA E0A04			;!!! macro
		ORA #1
		STA E0A04
		LDX #3
		STX E0A00
		LDX #$fb
		TXS
		LDA #>E0EDA
		STA nmivec+1
		LDA #<E0EDA
		STA nmivec
		+LoadB E0E2C, 0
		+LoadB E0E28, 6
		LDA cia2base+13
		+LoadW cia2base+4, $ffff
		+LoadB cia2base+13, $81
		+LoadB cia2base+14, $01
		JMP $401c

EE172		LDA cia2base+13			;e172 - is it E0EDA?
		DEC E0E28
		BNE EE1A3
		+LoadB E0E28, 1
		LDY E0E2C
		INC E0E2C
		LDA E0E00,y
		BNE EE19C
		+LoadB cia2base+13, $7f
		LDX #2
EE191		LDA E0E29,x			;e191
		STA BASICspace,x
		DEX
		BPL EE191
		LDA #$0d
EE19C		STA $034A			;e19c
		+LoadB $d0, 1
EE1A3		JMP $ff33

_GetRealSize_					;e1a6
		+subv 32
_GetRealSize2_	JSR GetChWdth1			;e1a9
		TAY
		TXA
		AND #$40
		BEQ GReSiz0
		INY
GReSiz0		TXA				;e1b3
		AND #$08
		BNE GReSiz1
		LDX curHeight
		LDA baselineOffset
		RTS
GReSiz1		LDX curHeight			;e1bd
		INX
		INX
		INY
		INY
		LDA baselineOffset
		+addv 2
		RTS

Font_1						;e1c9
		LDY r1H
		INY
		STY E8804
		STA r5L
		JSR GetChWdth1
		PHA
		LDA r5L
		ASL
		TAY
		LDA (curIndexTable),y
		STA r2L
		AND #%00000111
		STA E8803
		LDA r2L
		AND #%11111000
		STA r3L
		INY
		LDA (curIndexTable),y
		STA r2H
		PLA
		+add r2L
		STA r6H
		CLC
		SBC r3L
		LSR
		LSR
		LSR
		STA r3H
		TAX
		CPX #3
		BCC Font_11
		LDX #3
Font_11 	LDA Font_tabL,x 		;e202
		STA r13L
		LDA Font_tabH,x
		STA r13H
		LDA r2L
		LSR r2H
		ROR
		LSR r2H
		ROR
		LSR r2H
		ROR
		+add cardDataPntr
		STA r2L
		LDA r2H
		ADC cardDataPntr+1
		STA r2H
		LDY E8803
		LDA BitMask3,y
		EOR #$ff
		STA E8802
		LDY r6H
		DEY
		TYA
		AND #%00000111
		TAY
		LDA BitMask4,y
		EOR #$ff
		STA r7H
		LDY #0
		LDA currentMode
		AND #SET_OUTLINE
		BEQ Font_12
		LDY #$80
Font_12 	STY r8H
		LDA r5L
		LDX currentMode
		JSR _GetRealSize2_
		STA r5H
		+SubB r5H, r1H
		STX r10H
		TYA
		PHA
		LDA r11H
		BMI Font_13
		+CmpW rightMargin, r11
		BCC Font_16
Font_13 	LDA currentMode 		;e26b
		AND #SET_ITALIC
		BNE Font_14
		TAX
Font_14 	TXA				;e272
		LSR
		STA r3L
		+add r11L
		STA FontTVar2
		LDA r11H
		ADC #0
		STA FontTVar2+1
		+PopB PrvCharWidth
		+add FontTVar2
		STA r11L
		LDA #0
		ADC FontTVar2+1
		STA r11H
		BMI Font_17
		+CmpW leftMargin, r11
		BCS Font_17
		JSR Font_2
		LDX #0
		LDA currentMode
		AND #SET_REVERSE
		BEQ Font_15
		DEX
Font_15 	STX r10L			;e2ae
		CLC
		RTS
Font_16 					;e2b2
		+PopB PrvCharWidth
		+add r11L
		STA r11L
		BCC Font_18
		INC r11H
		SEC
		RTS
Font_17 					;e2c1
		+SubB r3L, r11L
		BCS Font_18
		DEC r11H
Font_18 	SEC				;e2cc
		RTS

Font_tabL	!byte <FontGt1, <FontGt2, <FontGt3, <FontGt4	;e2ce
Font_tabH	!byte >FontGt1, >FontGt2, >FontGt3, >FontGt4	;e2d2

Font_2						;e2d6
		LDX r1H
		JSR _GetScanLine_
		LDA FontTVar2
		LDX FontTVar2+1
		BMI Font_22
		CPX leftMargin+1
		BNE Font_21
		CMP leftMargin
Font_21 	BCS Font_23			;e2e9
Font_22 	LDX leftMargin+1		;e2eb
		LDA leftMargin
Font_23 	PHA				;e2ef
		AND #%11111000
		STA r4L
		+bbsf 7, graphMode, Font_26_1
		CPX #0
		BNE Font_24
		CMP #$c0
		BCC Font_26
Font_24 	+subv $80			;e300
		PHA
		+AddVB $80, r5L
		STA r6L
		BCC Font_25
		INC r5H
		INC r6H
Font_25 	PLA				;e313
Font_26 	STA r1L 			;e314
		+bra Font_26_2
Font_26_1	LDY #0				;e319
		STY r1L
		STX r4H
		LSR r4H
		ROR
		LSR r4H
		ROR
		LSR
		+add r5L
		STA r5L
		STA r6L
		BCC Font_26_2
		INC r5H
		INC r6H
Font_26_2	LDA FontTVar2+1			;e333
		LSR
		STA r7L
		LDA FontTVar2
		ROR
		LSR r7L
		ROR
		LSR r7L
		ROR
		STA r7L
		LDA leftMargin+1
		LSR
		STA r3L
		LDA leftMargin
		ROR
		LSR r3L
		ROR
		LSR
		+sub r7L
		BPL Font_27
		LDA #0
Font_27 	STA FontTVar1			;e358
		LDA FontTVar2
		AND #%00000111
		STA r7L
		PLA
		AND #%00000111
		TAY
		LDA BitMask3,y
		STA r3L
		EOR #$ff
		STA r9L
		LDY r11L
		DEY
		LDX rightMargin+1
		LDA rightMargin
		CPX r11H
		BNE Font_28
		CMP r11L
Font_28 	BCS Font_29			;e37c
		TAY
Font_29 	TYA				;e37f
		AND #%00000111
		TAX
		LDA BitMask4,x
		STA r4H
		EOR #$ff
		STA r9H
		TYA
		+sub r4L
		BPL Font_210
		LDA #0
Font_210	LSR				;e394
		LSR
		LSR
		+add FontTVar1
		STA r8L
		CMP r3H
		BCS Font_211
		LDA r3H
Font_211	CMP #3				;e3a3
		BCS Font_213
		ASL
		ASL
		ASL
		ASL
		STA r12L
		LDA r7L
		+sub E8803
		+addv 8
		+add r12L
		TAX
		LDA Font_tab2,x
		ADC #<FontSH1
		TAY
		LDA #0
		ADC #>FontSH1
		BNE Font_214
Font_213	LDA #>FontSH5			;e3c6
		LDY #<FontSH5
Font_214	STA r12H			;e3ca
		STY r12L
		RTS

Font_tab2					;e3cf
		!byte <(FntSh54_End-FontSH1)
		!byte <(FontSH3-FontSH1+0)
		!byte <(FontSH3-FontSH1+1)
		!byte <(FontSH3-FontSH1+2)
		!byte <(FontSH3-FontSH1+3)
		!byte <(FontSH3-FontSH1+4)
		!byte <(FontSH3-FontSH1+5)
		!byte <(FontSH3-FontSH1+6)
		!byte <(FontSH1-FontSH1+7)
		!byte <(FontSH1-FontSH1+6)
		!byte <(FontSH1-FontSH1+5)
		!byte <(FontSH1-FontSH1+4)
		!byte <(FontSH1-FontSH1+3)
		!byte <(FontSH1-FontSH1+2)
		!byte <(FontSH1-FontSH1+1)
		!byte <(FontSH1-FontSH1+0)
		!byte <(FntSh54_End-FontSH1)
		!byte <(FontSH_U2-FontSH1+0)
		!byte <(FontSH_U2-FontSH1+3)
		!byte <(FontSH_U2-FontSH1+6)
		!byte <(FontSH_U2-FontSH1+9)
		!byte <(FontSH_U2-FontSH1+12)
		!byte <(FontSH_U2-FontSH1+15)
		!byte <(FontSH_U2-FontSH1+18)
		!byte <(FontSH_U1-FontSH1+21)
		!byte <(FontSH_U1-FontSH1+18)
		!byte <(FontSH_U1-FontSH1+15)
		!byte <(FontSH_U1-FontSH1+12)
		!byte <(FontSH_U1-FontSH1+9)
		!byte <(FontSH_U1-FontSH1+6)
		!byte <(FontSH_U1-FontSH1+3)
		!byte <(FontSH_U1-FontSH1+0)
		!byte <(FntSh54_End-FontSH1)
		!byte <(FontSH4-FontSH1+0)
		!byte <(FontSH4-FontSH1+5)
		!byte <(FontSH4-FontSH1+10)
		!byte <(FontSH4-FontSH1+15)
		!byte <(FontSH4-FontSH1+20)
		!byte <(FontSH4-FontSH1+25)
		!byte <(FontSH4-FontSH1+30)
		!byte <(FontSH2-FontSH1+35)
		!byte <(FontSH2-FontSH1+30)
		!byte <(FontSH2-FontSH1+25)
		!byte <(FontSH2-FontSH1+20)
		!byte <(FontSH2-FontSH1+15)
		!byte <(FontSH2-FontSH1+10)
		!byte <(FontSH2-FontSH1+5)
		!byte <(FontSH2-FontSH1+0)

Font_3		LDA currentMode 		;e3ff
		BPL Font_32
		LDY r1H
		CPY E8804
		BEQ Font_31
		DEY
		CPY E8804
		BNE Font_32
Font_31 	LDA r10L			;e410
		EOR #$ff
		STA r10L
Font_32 	+bbrf ITALIC_BIT, currentMode, Font_37 ;e416
		LDA r10H
		LSR
		BCS Font_35
		LDX FontTVar2
		BNE Font_33
		DEC FontTVar2+1
Font_33 	DEX				;e429
		STX FontTVar2
		LDX r11L
		BNE Font_34
		DEC r11H
Font_34 	DEX				;e433
		STX r11L
		JSR Font_2
Font_35 	+CmpW rightMargin, FontTVar2
		BCC Font_36
		+CmpW leftMargin, r11
		BCC Font_37
Font_36 	SEC				;e453
		RTS
Font_37		CLC				;e455 ;!!!hint C=0 here
		RTS

Font_4		LDY r1L 			;e457
		LDX FontTVar1
		CPX r8L
		BEQ Font_43
		BCS Font_44
		LDA Z46,x
		EOR r10L
		AND r9L
		STA Font4_B1
		LDA r3L
		AND (r6),y
Font4_B1 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
Font_41 	TYA				;e475
		+addv 8
		TAY
		INX
		CPX r8L
		BEQ Font_42
		LDA Z46,x
		EOR r10L
		STA (r6),y
		STA (r5),y
		+bra Font_41
Font_42 	LDA Z46,x			;e48a
		EOR r10L
		AND r9H
		STA Font4_B2
		LDA r4H
		AND (r6),y
Font4_B2 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
		RTS
Font_43 	LDA Z46,x			;e49e
		EOR r10L
		AND r9H
		EOR #$ff
		ORA r3L
		ORA r4H
		EOR #$ff
		STA Font4_B3
		LDA r3L
		ORA r4H
		AND (r6),y
Font4_B3 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
Font_44 	RTS				;e4bb

; some unknown helper, seems to be alternative version (80) of
; previous Font_4 for alternative Font_10 (e6e0), but that one
; seems to be never called tough
EE4BC		LDX FontTVar1			;e4bc
		CPX r8L
		BEQ EE533
		BCS Font_44
		INX
		CPX r8L
		BNE EE4CD
		JMP EE557
EE4CD		DEX				;e4cd
		JSR EF497
		LDY #0
		STA EE509
		LDA r8L
		+sub FontTVar1
		+bbrf 6, dispBufferOn, EE4E6
		TAY
		LDA (r6),y
		+bra EE4FA
EE4E6		+add r5L			;e4e6
		STA r5L
		BCC EE4EF
		INC r5H
EE4EF		JSR EF522			;e4ef
		LDY r6H
		STY r5H
		LDY r6L
		STY r5L
EE4FA		STA EE52D			;e4fa
		LDA Z46,x
		EOR r10L
		AND r9L
		STA EE50B
		LDA r3L
EE509	= *+1
		AND #0
EE50B	= *+1
		ORA #0
		LDY #0
		JSR EF56A
EE511		INY				;e511
		INX
		CPX r8L
		BEQ EE521
		LDA Z46,x
		EOR r10L
		JSR EF5AE
		+bra EE511
EE521		LDA Z46,x			;e521
		EOR r10L
		AND r9H
		STA EE52F
		LDA r4H
EE52D	= *+1
		AND #0
EE52F	= *+1
		ORA #0
		JMP EF5AE
EE533		LDA Z46,x			;e533
		EOR r10L
		AND r9H
		EOR #$ff
		ORA r3L
		ORA r4H
		EOR #$ff
		STA EE553
		JSR EF497
		LDY #0
		STA EE551
		LDA r3L
		ORA r4H
EE551	= *+1
		AND #0
EE553	= *+1
		ORA #0
		JMP EF56A
EE557		DEX				;e557
		JSR EF497
		LDY #0
		STA EE573
		INY
		JSR VDCGetFromBGFG
		STA EE588
		LDA Z46,x
		EOR r10L
		AND r9L
		STA EE575
		LDA r3L
EE573	= *+1
		AND #0
EE575	= *+1
		ORA #0
		LDY #0
		JSR EF56A
		INY
		LDA Z46+1,x
		EOR r10L
		AND r9H
		STA EE58A
		LDA r4H
EE588	= *+1
		AND #0
EE58A	= *+1
		ORA #0
		JMP EF5AE

Font_5		LDX r8L 			;e58e
		LDA #0
Font_51 	STA E8805,x			;e592
		DEX
		BPL Font_51
		LDA r8H
		AND #%01111111
		BNE Font_54
Font_52 	JSR Font_8			;e59e
Font_52_2	LDX r8L
Font_53		LDA E8805,x			;e5a3
		STA Z46,x
		DEX
		BPL Font_53
		INC r8H
		RTS
Font_54 	CMP #1				;e5ae
		BEQ Font_55
		LDY r10H
		DEY
		BEQ Font_52
		DEY
		PHP
		JSR Font_8
		JSR Font_6
		PLP
		BEQ Font_56
Font_55		JSR Font_6			;e5c2
		JSR FntIndirectJMP
		JSR Font_8
		+SubW curSetWidth, r2
Font_56 	JSR FntIndirectJMP		;e5d8
		JSR Font_8
		JSR Font_7
		+bra Font_52_2

Font_6		+AddW curSetWidth, r2		;e5e4
		RTS

Font_7		LDY #$ff			;e5f2
Font_71 	INY				;e5f4
		LDX #7
Font_72 	LDA Z46,y			;e5f7
		AND BitMask2,x
		BEQ Font_73
		LDA BitMask2,x
		EOR #$ff
		AND E8805,y
		STA E8805,y
Font_73 	DEX				;e60a
		BPL Font_72
		CPY r8L
		BNE Font_71
		RTS

Font_8		JSR Font_9			;e612
		LDY #$ff
Font_81 	INY				;e617
		LDX #7
Font_82 	LDA Z46,y			;e61a
		AND BitMask2,x
		BEQ Font_87
		LDA E8805,y
		ORA BitMask2,x
		STA E8805,y
		INX
		CPX #8
		BNE Font_83
		LDA E8804,y
		ORA #1
		STA E8804,y
		+bra Font_84			;!!!hint BNE here is enough
Font_83		LDA E8805,y			;e63b
		ORA BitMask2,x
		STA E8805,y
Font_84 	DEX				;e644
		DEX
		BPL Font_85
		LDA E8806,y
		ORA #$80
		STA E8806,y
		+bra Font_86			;!!!hint BNE here is enough
Font_85		LDA E8805,y			;e653
		ORA BitMask2,x
		STA E8805,y
Font_86 	INX				;e65c
Font_87 	DEX				;e65d
		BPL Font_82
		CPY r8L
		BNE Font_81
		RTS

Font_9		LSR Z46 			;e665
		ROR Z46+1
		ROR Z46+2
		ROR Z46+3
		ROR Z46+4
		ROR Z46+5
		ROR Z46+6
		ROR Z46+7
		RTS

; seems to be main function for printing a character, much more
; important than its name says :)
_Font_10_ 					;e676
		TAY
		+PushB r1H
		TYA
		JSR Font_1
		BCS Font_108
		JSR _TempHideMouse_
		+bbrf 7, graphMode, Font_100
		JMP EE708
Font_100	CLC				;e68a
		LDA currentMode
		AND #SET_UNDERLINE | SET_ITALIC
		BEQ Font_101
		JSR Font_3
Font_101	PHP				;e694
		BCS Font_102
		JSR FntIndirectJMP
Font_102	+bbrf 7, r8H, Font_103		;e69a
		JSR Font_5
		+bra Font_104
Font_103	JSR Font_6			;e6a4
Font_104	PLP				;e6a7
		BCS Font_106
		LDA r1H
		CMP windowTop
		BCC Font_106
		CMP windowBottom
		BCC Font_105
		BNE Font_106
Font_105	JSR Font_4			;e6b6
Font_106	INC r5L 			;e6b9
		INC r6L
		LDA r5L
		AND #%00000111
		BNE Font_107
		INC r5H
		INC r6H
		+AddVB $38, r5L
		STA r6L
		BCC Font_107
		INC r5H
		INC r6H
Font_107	INC r1H 			;e6d6
		DEC r10H
		BNE Font_100
Font_108	+PopB r1H			;e6dc
		RTS

; and this seems to be alternative for Font_10 in 80 columns...
EE6E0		+AddVB 80, r5L			;e6e0
		STA r6L
		BCC EE6EF
		INC r5H
		INC r6H
EE6EF		INC r1H				;e6ef
		+CmpBI r1H, 100
		BNE EE708
		+bbrf 6, dispBufferOn, EE708
		+AddVB $21, r6H
		+bbsf 7, dispBufferOn, EE708
		STA r5H
EE708		CLC				;e708
		LDA currentMode
		AND #SET_UNDERLINE | SET_ITALIC
		BEQ EE712
		JSR Font_3
EE712		PHP				;e712
		BCS EE718
		JSR FntIndirectJMP
EE718		+bbsf 7, r8H, EE743
		+AddW curSetWidth, r2
EE729		PLP				;e729
		BCS EE73B
		LDA r1H
		CMP windowTop
		BCC EE73B
		CMP windowBottom
		BCC EE738
		BNE EE73B
EE738		JSR EE4BC			;e738
EE73B		DEC r10H
		BNE EE6E0
		+PopB r1H
		RTS
EE743		JSR Font_5			;e743
		+bra EE729

FntIndirectJMP	LDY #0				;e749
		JMP (r13)

FntShJump	STA Z46 			;e74e
		+bbsf BOLD_BIT, currentMode, FntShJ_1
		RTS
FntShJ_1	LDA #0				;e755
		PHA
		LDY #$ff
FntShJ_2 	INY				;e75a
		LDX Z46,y
		PLA
		ORA EC000,x
		STA Z46,y
		TXA
		LSR
		LDA #0
		ROR
		PHA
		CPY r8L
		BNE FntShJ_2
		PLA
		RTS

FontGt1 	STY Z46+1			;e770
		STY Z46+2
		LDA (r2),y
		AND E8802
		AND r7H
		JMP (r12)

FontGt2 	STY Z46+2			;e77e
		STY Z46+3
		LDA (r2),y
		AND E8802
		STA Z46
		INY
		LDA (r2),y
		AND r7H
		STA Z46+1
FontGt2_1	LDA Z46 			;e790
		JMP (r12)

FontGt3 	STY Z46+3			;e795
		STY Z46+4
		LDA (r2),y
		AND E8802
		STA Z46
		INY
		LDA (r2),y
		STA Z46+1
		INY
		LDA (r2),y
		AND r7H
		STA Z46+2
		LDA Z46				;!!!hint +bra FontGt2_1
		JMP (r12)

FontGt4 	LDA (r2),y			;e7b1
		AND E8802
		STA Z46
FontGt4_1	INY				;e7b8
		CPY r3H
		BEQ FontGt4_2
		LDA (r2),y
		STA Z46,y
		+bra FontGt4_1
FontGt4_2	LDA (r2),y			;e7c5
		AND r7H
		STA Z46,y
		LDA #0
		STA Z46+1,y
		STA Z46+2,y
		LDA Z46				;!!!hint BEQ FontGt2_1
		JMP (r12)

;procedures indexed from Font_Tab2, DO NOT CHANGE!
FontSH1 	LSR				;e7d9
		LSR
		LSR
		LSR
		LSR
		LSR
		LSR
		JMP FntShJump
FontSH_U1	LSR				;e7e3
		ROR Z46+1
		LSR
		ROR Z46+1
		LSR
		ROR Z46+1
		LSR
		ROR Z46+1
		LSR
		ROR Z46+1
		LSR
		ROR Z46+1
		LSR
		ROR Z46+1
		JMP FntShJump
FontSH2 	LSR				;e7fb
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		LSR
		ROR Z46+1
		ROR Z46+2
		JMP FntShJump
FontSH3 	ASL				;e821
		ASL
		ASL
		ASL
		ASL
		ASL
		ASL
		JMP FntShJump
FontSH_U2	ASL Z46+1			;e82b
		ROL
		ASL Z46+1
		ROL
		ASL Z46+1
		ROL
		ASL Z46+1
		ROL
		ASL Z46+1
		ROL
		ASL Z46+1
		ROL
		ASL Z46+1
		ROL
		JMP FntShJump
FontSH4 	ASL Z46+2 			;e843
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		ASL Z46+2
		ROL Z46+1
		ROL
		JMP FntShJump
FontSH5 	STA Z46				;e869
		LDA r7L
		+sub E8803
		BEQ FntSh52
		BCC FntSh53
		TAY
FntSh51		JSR Font_9			;e876
		DEY
		BNE FntSh51
FntSh52 	LDA Z46				;e87c
		JMP FntShJump
FntSh53		LDA E8803			;e881
		+sub r7L
		TAY
FntSh54 	ASL Z46+7			;e888
		ROL Z46+6
		ROL Z46+5
		ROL Z46+4
		ROL Z46+3
		ROL Z46+2
		ROL Z46+1
		ROL Z46
		DEY
		BNE FntSh54
		LDA Z46
		JMP FntShJump
FntSh54_End					;e8a0
; end of indexed table, keep on changin'

EE8A0		RTS				;e8a0 ;!!!hint

_BitOtherClip_					;e8a1
		LDX #$ff
		JMP BitmClp1			;!!!hint BNE here?
_BitmapClip_					;e8a6
		LDX #0
BitmClp1	STX r9H 			;e8a8
		JSR _TempHideMouse_
		+PushB mmu+6
		AND #%11110000
		ORA #%00001010
		STA mmu+6
		LDA #0
		STA r3L
		STA r4L
BitmClp2	LDA r12L			;e8be
		ORA r12H
		BEQ BitmClp4
		LDA r11L
		JSR BitmHelpClp
		LDA r2L
		BPL BitmClp2_1
		ASL
BitmClp2_1	+bbsf 7, graphMode, BitmClp2_2	;e8ce
		LDA r2L
		AND #%01111111
BitmClp2_2	JSR BitmHelpClp			;e8d6
		LDA r11H
		JSR BitmHelpClp
		LDA r12L
		BNE BitmClp3
		DEC r12H
BitmClp3	DEC r12L			;e8e4
		+bra BitmClp2
BitmClp4	LDA r11L			;e8e9
		JSR BitmHelpClp
		JSR BitmapUpHelp
		LDA r11H
		JSR BitmHelpClp
		INC r1H
		DEC r2H
		BNE BitmClp4
		+PopB mmu+6
		RTS

BitmHelpClp	CMP #0				;e901
		BEQ BitmHClp1
		PHA
		JSR BitmapDecode
		PLA
		+subv 1
		BNE BitmHelpClp
BitmHClp1	RTS				;e90f

_BitmapUp_					;e910
		JSR _TempHideMouse_
		+PushB mmu+6
		AND #%11110000
		ORA #%00001010
		STA mmu+6
		+PushB r9H
		+LoadB r9H, NULL
		+LoadB E888D, NULL		;!!!hint STA here
		STA r3L
		STA r4L
BitmUp1 	JSR BitmapUpHelp		;e92e
		INC r1H
		DEC r2H
		BNE BitmUp1
		+PopB r9H
		+PopB mmu+6
		RTS

BitmapUpHelp	LDX r1H 			;e93f
		JSR _GetScanLine_
		+MoveB r2L, r3H
		BPL BitmUpH0_2
		+bbsf 7, graphMode, BitmUpH0_1
		AND #$7f
		STA r3H
		BNE BitmUpH0_2
BitmUpH0_1	ASL r3H				;e954
BitmUpH0_2	+bbsf 7, graphMode, BitmUpH4	;e956
		LDA r1L
		AND #$7f
		CMP #$20
		BCC BitmUpH1
		INC r5H
		INC r6H
BitmUpH1	ASL				;e966
		ASL
		ASL
		TAY
BitmUpH2	STY r9L 			;e96a
		JSR BitmapDecode
		LDY r9L
		STA (r5),y
		STA (r6),y
		TYA
		+addv 8
		BCC BitmUpH3
		INC r5H
		INC r6H
BitmUpH3	TAY				;e97f
		DEC r3H
		BNE BitmUpH2
		RTS
; now the 80 column version...
BitmUpH4	LDA r1L				;e985
		BPL BitmUpH5
		ASL
BitmUpH5	+add r5L			;e98a
		STA r5L
		STA r6L
		BCC BitmUpH6
		INC r5H
		INC r6H
BitmUpH6	JSR BitmapDecode		;e997
		JSR EF573
		JSR EF5CC
		INC r6L
		INC r5L
		BNE BitmUpH7
		INC r6H
		INC r5H
BitmUpH7	DEC r3H
		BNE BitmUpH6
		RTS

BitmapDecode	+bbrf 7, graphMode, BitmapDecode_	;e9af
		+bbrf 7, r2L, BitmapDecode_
		+bbrf 0, E888D, BitmDec1	;e9c5
		LDA E888E
		INC E888D
		RTS
; this is for stretching bitmap 2x in X axis
BitmDec1	JSR BitmapDecode_		;e9c5
		STA E888E
		LDY #3
BitmDec2	ASL E888E			;e9cd
		PHP
		ROL
		PLP
		ROL
		DEY
		BPL BitmDec2
		PHA
		LDY #3
BitmDec3	ASL E888E			;e9da
		PHP
		ROL
		PLP
		ROL
		DEY
		BPL BitmDec3
		STA E888E
		PLA
		INC E888D
		RTS

BitmapDecode_	LDA r3L 			;e9ec
		AND #%01111111
		BEQ BitmDe2
		+bbrf 7, r3L, BitmDe1
		JSR BitmapDecode2
		DEC r3L
		RTS
BitmDe1 	LDA r7H 			;e9fc
		DEC r3L
		RTS
BitmDe2 	LDA r4L 			;ea01
		BNE BitmDe3
		+bbrf 7, r9H, BitmDe3
		LDA #r14
		JSR RegisterJMP
BitmDe3 	JSR BitmapDecode2
		STA r3L
		CMP #$dc
		BCC BitmDe4
		SBC #$dc
		STA r7L
		STA r4H
		JSR BitmapDecode2
		+subv 1
		STA r4L
		+MoveW r0, r8
		+bra BitmDe2
BitmDe4 	CMP #$80			;ea30
		BCS BitmapDecode_
		JSR BitmapDecode2
		STA r7H
		+bra BitmapDecode_

BitmapDecode2	+bbrf 7, r9H, BitmDe21		;ea3c
		LDA #r13
		JSR RegisterJMP
BitmDe21	LDA config			;ea45 !!!hint +smbf 0, config
		ORA #1
		STA config
		LDY #0
		LDA (r0),y
		PHA
		LDA config			;!!!hint +rmbf 0, config
		AND #%11111110
		STA config
		PLA
		INC r0L
		BNE *+4
		INC r0H
		LDX r4L
		BEQ BitmDe22
		DEC r4H
		BNE BitmDe22
		LDX r8H
		STX r0H
		LDX r8L
		STX r0L
		LDX r7L
		STX r4H
		DEC r4L
BitmDe22	RTS				;ea77

_UseSystemFont_					;ea78
		+bbsf 7, graphMode, UseSysFnt80
		+LoadW r0, BSWFont
		+bra _LoadCharSet_
UseSysFnt80	+LoadW r0, BSWFont80		;ea87
_LoadCharSet_	LDY #0				;ea8f
UseSysFnt1	LDA (r0),y			;ea91
		STA baselineOffset,y
		INY
		CPY #8
		BNE UseSysFnt1
		+AddW r0, curIndexTable
		+AddW r0, cardDataPntr
		RTS

_GetCharWidth_					;eab6
		+subv $20
		BCS GetChWdth1
		LDA #0
		RTS
GetChWdth1	CMP #$5f			;eabe
		BEQ GetChWdth2
		ASL
		TAY
		INY
		INY
		LDA (curIndexTable),y
		DEY
		DEY
		SEC
		SBC (curIndexTable),y
		RTS
GetChWdth2	LDA PrvCharWidth		;eace
		RTS

_PromptOn_					;ead2
		LDX #%10000000
		LDA alphaFlag
		ORA #%01000000
		BNE PromptEnd
_PromptOff_	LDX #%01000000			;eadb
		LDA alphaFlag
		AND #%10111111
PromptEnd	STX E881A			;eae2
		AND #%11000000
		ORA #%00111100
		STA alphaFlag
		RTS

_InitTextPrompt_				;eaed
		TAY
		+MoveB mob0clr, mob1clr
		LDA moby2			;!!!hint +rmbf 1, moby2
		AND #%11111101
		STA moby2
		TYA
		PHA
		+LoadB alphaFlag, %10000011
		LDX #64
		LDA #0
IniTxPrm1	STA spr1pic-1,x 		;eb07
		DEX
		BNE IniTxPrm1
		PLA
		TAY
		CPY #42
		BCC IniTxPrm2
		LDY #42
IniTxPrm2	CPY #21				;eb15
		BCC IniTxPrm3
		BEQ IniTxPrm3
		TYA
		LSR
		TAY
		LDA moby2			;!!!hint +smbf 1, moby2
		ORA #2
		STA moby2
IniTxPrm3	TYA				;eb26
		ORA #$80
		STA spr1pic+63
		LDA #%10000000
IniTxPrm4	STA spr1pic,x			;eb2e
		INX
		INX
		INX
		DEY
		BNE IniTxPrm4
		RTS

PrepareXCoord					;eb38
		JSR _TempHideMouse_
		LDX #r3
		JSR EFF26
		LDX #r4
		JSR EFF26
		LDA r4L
		LDX r4H
		CPX r3H
		BNE PrpXCoord1
		CMP r3L
PrpXCoord1	BCS PrpXCoord2			;eb4f
		LDY r3H
		STY r4H
		LDY r3L
		STY r4L
		STA r3L
		STX r3H
PrpXCoord2	LDX r11L			;eb5d
		JSR _GetScanLine_
		LDA r4L
		AND #%00000111
		TAX
		LDA BitMask4,x
		STA r8H
		LDA r3L
		AND #%00000111
		TAX
		LDA BitMask3,x
		STA r8L
		+bbrf 7, graphMode, PrpXCoord3
		JSR EF6C1
PrpXCoord3	LDA r3L				;eb7d
		AND #%11111000
		STA r3L
		LDA r4L
		AND #%11111000
		STA r4L
		CMP r3L
		BNE PrpXCoord4
		+CmpB r4H, r3H
PrpXCoord4	RTS				;eb91

_HorizontalLine_ 				;eb92
		STA r7L
		+PushW r3
		+PushW r4
		JSR PrepareXCoord
		PHP
		+bbsf 7, graphMode, HLin80
		LDY r3L
		LDA r3H
		BEQ HLin0
		INC r5H
		INC r6H
HLin0		PLP				;ebb2
		BEQ HLin4
		JSR HLineHelp2
		JSR HLineHelp
HLin2		STA (r6),Y			;ebbb
		STA (r5),Y
		TYA
		+addv 8
		TAY
		BCC HLin3
		INC r5H
		INC r6H
HLin3		DEC r4L 			;ebca
		BEQ HLin5
		LDA r7L
		+bra HLin2
HLin4		LDA r8L 			;ebd3
		ORA r8H
		+bra HLin6
HLin5		LDA r8H 			;ebda
HLin6		JSR HLineHelp			;ebdc
HLin7		STA (r6),Y			;ebdf
		STA (r5),Y
HLin8		+PopW r4			;ebe3
		+PopW r3
		RTS
HLin80		PLP				;ebf0
		BEQ HLin80_4
		JSR HLineHelp2
		JSR HLineHelp3
		JSR HLine80Help
		BEQ HLin80_5
		+bbrf 6, dispBufferOn, HLin80_2
		LDY r4L
		LDA r7L
HLin80_1	DEY				;ec06
		STA (r6),y
		CPY #0
		BNE HLin80_1
HLin80_2	LDA r7L				;ec0d
		JSR VDCSetWordCount
		LDA r5L				;!!!hint+AddB r4L, r5L
		+add r4L
		STA r5L
		STA r6L
		BCC HLin80_3
		INC r5H
		INC r6H
HLin80_3	+bra HLin80_5			;ec21
HLin80_4	LDA r8L				;ec24
		ORA r8H
		+bra HLin80_6
HLin80_5	LDA r8H				;ec2b
HLin80_6	JSR HLineHelp3			;ec2d
		JSR EF5CC
		JSR EF573
		JMP HLin8

;!!! used only once
HLine80Help	JSR EF5CC			;ec39
		JSR EF573
		INC r6L
		INC r5L
		BNE HLine80Help1
		INC r5H
		INC r6H
HLine80Help1	DEC r4L
		RTS

HLineHelp2	+SubW r3, r4			;ec4c
		LSR r4H
		ROR r4L
		LSR r4H
		ROR r4L
		LSR r4L
		LDA r8L
		RTS

HLineHelp	STA r11H			;ec66
		AND (r6),Y
HLineHelp_0	STA r7H				;ec6a
		LDA r11H
		EOR #$FF
		AND r7L
		ORA r7H
		RTS

HLineHelp3	STA r11H			;ec75
		JSR EF4B7
		+bra HLineHelp_0

_InvertLine_					;ec7d
		+PushW r3
		+PushW r4
		JSR PrepareXCoord
		PHP
		+bbsf 7, graphMode, ILin80
		LDY r3L
		LDA r3H
		BEQ ILin0
		INC r5H
		INC r6H
ILin0		PLP				;ec9b
		BEQ ILin4
		JSR HLineHelp2
		EOR (r5),Y
ILin2		EOR #$FF			;eca3
		STA (r6),Y
		STA (r5),Y
		TYA
		+addv 8
		TAY
		BCC ILin3
		INC r5H
		INC r6H
ILin3		DEC r4L 			;ecb4
		BEQ ILin5
		LDA (r5),Y
		+bra ILin2
ILin4		LDA r8L 			;ecbd
		ORA r8H
		+bra ILin6
ILin5		LDA r8H 			;ecc4
ILin6		EOR #$FF			;ecc6
		EOR (r5),Y
		JMP HLin7
ILin80		PLP				;eccd
		JSR HLineHelp2
		INC r4L
		JSR SetMMUShareBoth
		+PushW r5
		LDX r4L
		DEX
		BMI ILin80_3
		JSR EF522
		+bra ILin80_2
ILin80_1	DEX				;ece7
		BMI ILin80_3
		JSR ILin80_Help
ILin80_2	EOR #$ff			;eced
		STA E1CED,x
		INC r5L
		BNE *+4
		INC r5H
		+bra ILin80_1
ILin80_3	+PopW r5			;ecfb
		LDA E1CED
		EOR r8H
		STA E1CED
		LDX r4L
		DEX
		BMI ILin80_7
		LDA E1CED,x
		EOR r8L
		JSR EF573
		+bra ILin80_5
ILin80_4	DEX				;ed19
		BMI ILin80_7
		LDA E1CED,x
		JSR EF5BF
ILin80_5	JSR EF5CC			;ed22
		INC r6L
		INC r5L
		BNE ILin80_6
		INC r6H
		INC r5H
ILin80_6	+bra ILin80_4			;ed19
ILin80_7	JSR SetMMUShareTop		;ed32
		JMP HLin8

ILin7		+PushW r3			;ed38
		+PushW r4
		+PushB dispBufferOn
		ORA #ST_WR_FORE | ST_WR_BACK
		STA dispBufferOn
		JSR PrepareXCoord
		+bbrf 7, graphMode, ILin7_1
		JMP Read80Line
ILin7_1		LDA r5L				;ed55
		LDY r6L
		STA r6L
		STY r5L
		LDA r5H
		LDY r6H
		STA r6H
		STY r5H
		+bra RLin0

_RecoverLine_					;ed68
		+PushW r3
		+PushW r4
		+PushB dispBufferOn
		ORA #ST_WR_FORE | ST_WR_BACK
		STA dispBufferOn
		JSR PrepareXCoord
		+bbrf 7, graphMode, RLin0
		JMP Write80Line
RLin0		+PopB dispBufferOn		;ed85
		LDY r3L
		LDA r3H
		BEQ RLin1
		INC r5H
		INC r6H
RLin1		JSR CmpWR3R4			;ed92
		BEQ RLin5
		JSR HLineHelp2
		JSR RecLineHelp
RLin3		TYA				;ed9d
		+addv 8
		TAY
		BCC RLin4
		INC r5H
		INC r6H
RLin4		DEC r4L 			;eda8
		BEQ RLin6
		LDA (r6),Y
		STA (r5),Y
		+bra RLin3
RLin5		LDA r8L 			;edb3
		ORA r8H
		+bra RLin7
RLin6		LDA r8H 			;edba
RLin7		JSR RecLineHelp 		;edbc
		JMP HLin8

Read80Line	JSR CmpWR3R4			;edc2
		BEQ Read80L_3
		JSR HLineHelp2
		JSR Read80Help
		INY
Read80L_1	DEC r4L				;edce
		BEQ Read80L_4
Read80L_2	BIT vdcreg			;edd2
		BPL Read80L_2
		LDA vdcdata
		STA (r6),y
		INY
		BNE Read80L_1
Read80L_3	LDA r8L				;eddf
		ORA r8H
		+bra Read80L_6
Read80L_4	TYA				;ede6
		+add r5L
		STA r5L
		STA r6L
		BCC Read80L_5
		INC r5H
		INC r6H
Read80L_5	LDA r8H				;edf4
Read80L_6	JSR Read80Help			;edf6
		+PopB dispBufferOn
		JMP HLin8

Write80Line	JSR CmpWR3R4			;edff
		BEQ Write80L_3
		JSR HLineHelp2
		JSR Write80Help
		INY
Write80L_1	DEC r4L				;ee0b
		BEQ Write80L_4
		LDA (r6),y
Write80L_2	BIT vdcreg			;ee11
		BPL Write80L_2
		STA vdcdata
		INY
		BNE Write80L_1
Write80L_3	LDA r8L				;ee1c
		ORA r8H
		+bra Write80L_6
Write80L_4	TYA				;ee23
		+add r5L
		STA r5L
		STA r6L
		BCC Write80L_5
		INC r5H
		INC r6H
Write80L_5	LDA r8H				;ee31
Write80L_6	JSR Write80Help			;ee33
		+PopB dispBufferOn
		JMP HLin8

RecLineHelp	STA r7L 			;ee3c
		AND (r5),Y
		STA r7H
		LDA r7L
		EOR #$FF
		AND (r6),Y
		ORA r7H
		STA (r5),Y
		RTS

Write80Help	STA r7L				;ee4d
		JSR EF558
		STA r7H
		LDA r7L
		EOR #$ff
		LDY #0
		AND (r6),y
		ORA r7H
		JMP EF573

Read80Help	STA r7L				;ee61
		LDY #0
		AND (r6),y
		STA r7H
		LDA r7L
		EOR #$ff
		JSR EF558
		ORA r7H
		STA (r6),y
		RTS

_VerticalLine_					;ee75
		STA r8L
		JSR _TempHideMouse_
		LDX #r4
		JSR EFF26
		+bbsf 7, graphMode, VLin80
		+PushB r4L
		AND #%00000111
		TAX
		LDA BitMask1,x
		STA r7H
		LDA r4L
		AND #%11111000
		STA r4L
		LDY #0
		LDX r3L
VLin0		STX r7L 			;ee98
		JSR _GetScanLine_
		+AddW r4, r5
		+AddW r4, r6
		LDA r7L
		AND #%00000111
		TAX
		LDA BitMask1,x
		AND r8L
		BNE VLin1
		LDA r7H
		EOR #$FF
		AND (r6),Y
		+bra VLin2
VLin1		LDA r7H 			;eecc
		ORA (r6),Y
VLin2		STA (r6),Y			;eed0
		STA (r5),Y
		LDX r7L
		INX
		CPX r3H
		BEQ VLin0
		BCC VLin0
		+PopB r4L
		RTS
VLin80		+PushW r3			;eee1
		LDX r3L
		STX r7L
		JSR _GetScanLine_
		+MoveW r4, r3
		JSR EF6C1
		LDA BitMask1,x
		STA r7H
		+PopW r3
		LDX r3L
VLin80_1	STX r7L				;ef06
		TXA
		AND #%00000111
		TAX
		LDA BitMask1,x
		AND r8L
		BNE VLin80_2
		LDA r7H
		EOR #$ff
		JSR EF4B7
		+bra VLin80_3
VLin80_2	LDA r7H				;ef1d
		JSR EF4A7
VLin80_3	JSR EF5CC			;ef22
		JSR EF573
		LDX r7L
		JSR VLin80Help
		CPX r3H
		BEQ VLin80_1
		BCC VLin80_1
		RTS

VLin80Help	+AddVB 80, r5L			;ef34
		STA r6L
		BCC VLin80Hlp_1
		INC r5H
		INC r6H
VLin80Hlp_1	INX				;ef43
		CPX #100
		BEQ VLin80Hlp_2
		RTS
VLin80Hlp_2	+bbrf 6, dispBufferOn, VLin80Hlp_3	;ef49
		+AddVB 33, r6H
		+bbsf 7, dispBufferOn, VLin80Hlp_3
		STA r5H
VLin80Hlp_3	RTS

_Rectangle_					;ef5b
		+MoveB r2L, r11L
Rect1		LDA r11L			;ef5f
		AND #$07
		TAY
		+PushB mmu+6
		AND #%11110000
		ORA #%00001010
		STA mmu+6
		LDA (curPattern),Y
		TAX
		+PopB mmu+6
		TXA
		JSR _HorizontalLine_
		LDA r11L
		INC r11L
		CMP r2H
		BNE Rect1
		RTS

_InvertRectangle_				;ef83
		+MoveB r2L, r11L
IRect1		JSR _InvertLine_		;ef87
		LDA r11L
		INC r11L
		CMP r2H
		BNE IRect1
		RTS

_RecoverRectangle_				;ef93
		+MoveB r2L, r11L
RRect1		JSR _RecoverLine_		;ef97
		LDA r11L
		INC r11L
		CMP r2H
		BNE RRect1
		RTS

_ImprintRectangle_				;efa3
		+MoveB r2L, r11L
ImRec1		JSR ILin7			;efa7
		LDA r11L
		INC r11L
		CMP r2H
		BNE ImRec1
		RTS

_FrameRectangle_ 				;efb3
		STA r9H
		LDY r2L
		STY r11L
		JSR _HorizontalLine_
		+MoveB r2H, r11L
		LDA r9H
		JSR _HorizontalLine_
		+PushW r3
		+PushW r4
		+MoveW r3, r4
		+MoveW r2, r3
		LDA r9H
		JSR _VerticalLine_
		+PopW r4
		LDA r9H
		JSR _VerticalLine_
		+PopW r3
		RTS

;!!!hint This is never called in bank0
;GetInlineDrwParms				;eff8
		+PopW r5
		+PopW returnAddress
		LDY #1
		LDA (returnAddress),Y
		STA r2L
		INY
		LDA (returnAddress),Y
		STA r2H
		INY
		LDA (returnAddress),Y
		STA r3L
		INY
		LDA (returnAddress),Y
		STA r3H
		INY
		LDA (returnAddress),Y
		STA r4L
		INY
		LDA (returnAddress),Y
		STA r4H
		+PushW r5
;GtDrwPrmsEnd
		RTS

BitMask1	!byte $80, $40, $20, $10, $08, $04, $02		;f02a
BitMask2	!byte $01, $02, $04, $08, $10, $20, $40, $80	;f031
BitMask3	!byte $00, $80, $c0, $e0, $f0, $f8, $fc, $fe	;f039
BitMask4	!byte $7f, $3f, $1f, $0f, $07, $03, $01, $00	;f041

_DrawLine_					;f049
		PHP
		BMI DrawLin0_1
		+CmpB r11L, r11H
		BNE DrawLin0_1
		LDA #$ff
		PLP
		BCS DrawLin0_0
		LDA #0
DrawLin0_0	JMP _HorizontalLine_		;f059
DrawLin0_1	LDX #r3				;f05c
		JSR EFF26
		LDX #r4
		JSR EFF26
		+LoadB r7H, 0
		LDA r11H
		+sub r11L
		STA r7L
		BCS DrwLin1
		LDA #0
		+sub r7L
		STA r7L
DrwLin1 	LDA r4L 			;f07a
		+sub r3L
		STA r12L
		LDA r4H
		SBC r3H
		STA r12H
		LDX #r12
		JSR DabsBank0
		+CmpW r12, r7		
		BCS DrwLin2
		JMP DrawLine2
DrwLin2		+MoveW r7, r9			;f09b
		LDY #1
		LDX #r9
		JSR DShiftLeftBank0
		LDA r9L
		+sub r12L
		STA r8L
		LDA r9H
		SBC r12H
		STA r8H
		LDA r7L
		+sub r12L
		STA r10L
		LDA r7H
		SBC r12H
		STA r10H
		LDY #1
		LDX #r10
		JSR DShiftLeftBank0
		+LoadB r13L, $ff
		JSR CmpWR3R4
		BCC DrwLin4
		+CmpB r11L, r11H
		BCC DrwLin3
		+LoadB r13L, 1
DrwLin3		+PushW r3			;f0de
		+MoveW r4, r3
		+MoveB r11H, r11L
		+PopW r4
		+bra DrwLin5
DrwLin4 	LDY r11H			;f0f9
		CPY r11L
		BCC DrwLin5
		+LoadB r13L, 1
DrwLin5 	PLP				;f103
		PHP
		JSR _DrawPoint_
		JSR CmpWR3R4
		BCS DrwLin7
		INC r3L
		BNE *+4
		INC r3H
		+bbrf 7, r8H, DrwLin6
		+AddW r9, r8
		+bra DrwLin5
DrwLin6 	+AddB r13L, r11L		;f127
		+AddW r10, r8
		+bra DrwLin5
DrwLin7 	PLP				;f13e
		RTS

DrawLine2	+MoveW r12, r9			;f140
		LDY #1
		LDX #r9
		JSR DShiftLeftBank0
		LDA r9L
		+sub r7L
		STA r8L
		LDA r9H
		SBC r7H
		STA r8H
		LDA r12L
		+sub r7L
		STA r10L
		LDA r12H
		SBC r7H
		STA r10H
		LDY #1
		LDX #r10
		JSR DShiftLeftBank0
		+LoadB r13H, $ff		;!!!hint +LoadW r13, $ffff
		+LoadB r13L, $ff
		+CmpB r11L, r11H
		BCC Drw2Lin2
		JSR CmpWR3R4
		BCC Drw2Lin1
		+LoadW r13, $0001
Drw2Lin1	+MoveW r4, r3			;f18b
		+PushB r11L
		+MoveB r11H, r11L
		+PopB r11H
		+bra Drw2Lin3
Drw2Lin2	JSR CmpWR3R4			;f1a0
		BCS Drw2Lin3
		+LoadW r13, $0001
Drw2Lin3	PLP				;f1ad
		PHP
		JSR _DrawPoint_
		+CmpB r11L, r11H
		BCS Drw2Lin5
		INC r11L
		+bbrf 7, r8H, Drw2Lin4
		+AddW r9, r8
		+bra Drw2Lin3
Drw2Lin4	+AddW r13, r3			;f1ce
		+AddW r10, r8
		+bra Drw2Lin3
Drw2Lin5	PLP				;f1eb
		RTS

_DrawPoint_					;f1ed
		PHP
		JSR _TempHideMouse_
		LDX #r3
		JSR EFF26
		LDX r11L
		JSR _GetScanLine_
		+bbsf 7, graphMode, DrwPoi80
		LDA r3L
		AND #%11111000
		TAY
		LDA r3H
		BEQ DrwPoi1
		INC r5H
		INC r6H
DrwPoi1 	LDA r3L 			;f20c
		AND #%00000111
		TAX
		LDA BitMask1, x
		PLP
		BMI DrwPoi4
		BCC DrwPoi2
		ORA (r6),y
		+bra DrwPoi3
DrwPoi2 	EOR #$ff			;f21e
		AND (r6),y
DrwPoi3 	STA (r6),y			;f222
		STA (r5),y
		RTS
DrwPoi4 	PHA				;f227
		EOR #$ff
		AND (r5),y
		STA (r5),y
		PLA
		AND (r6),y
		ORA (r5),y
		STA (r5),y
		RTS
DrwPoi80	JSR EF6C1			;f236
		LDA BitMask1, x
		PLP
		BMI DrwPoi80_3
		BCC DrwPoi80_1
		JSR EF4A7
		+bra DrwPoi80_2
DrwPoi80_1	EOR #$ff			;f247
		JSR EF4B7
DrwPoi80_2	JSR EF5CC			;f24c
		JMP EF573
DrwPoi80_3	PHA				;f252
		EOR #$ff
		JSR EF558
		STA DrwPointTemp
		PLA
		JSR EF4B7
		ORA DrwPointTemp
		JMP EF573

DrwPointTemp	!byte 0				;f265

_TestPoint_					;f266
		JSR _TempHideMouse_
		LDX #r3
		JSR EFF26
		LDX r11L
		JSR _GetScanLine_
		+bbsf 7, graphMode, TestPoi80
		LDA r3L
		AND #%11111000
		TAY
		LDA r3H
		BEQ *+4
		INC r6H
		LDA r3L
		AND #%00000111
		TAX
		LDA BitMask1,x
		AND (r6),y
		BEQ TestPoi1
		SEC
		RTS
TestPoi1	CLC				;f290
		RTS
TestPoi80	JSR EF6C1			;f292
		LDA BitMask1,x
		JSR EF4B7
		BEQ TestPoi80_1
		SEC
		RTS
TestPoi80_1	CLC				;f29f
		RTS

CmpWR3R4	+CmpW r3, r4			;f2a1
		RTS

_SetColorMode_					;f2ac
		CMP #5
		BCC SClrMod_1
		RTS
SClrMod_1	STA vdcClrMode
		+bbsf 7, graphMode, SClrMod_2
		RTS
SClrMod_2	TAY 				;f2b9
		LDA SetColorModeTabL,y
		STA r0L
		LDA SetColorModeTabH,y
		STA r0H
		LDY #0
SClrMod_3	LDA (r0),y			;f2c6
		INY
		CMP #$ff
		BEQ SClrMod_6
		TAX
		CPX #25
		BNE SClrMod_4
		LDA vdcreg
		AND #%00000111
		BEQ SClrMod_4
		LDA (r0),y
		ORA #%00000111
		STA (r0),y
SClrMod_4	JSR GetVDCRegister		;f2df
		CMP (r0),y
		BEQ SClrMod_5
		LDA (r0),y
		JSR SetVDCRegister
SClrMod_5	INY				;f2eb
		+bra SClrMod_3
SClrMod_6	LDX #28				;f2ef
		JSR GetVDCRegister
		AND #%11101111
		TAY
		+CmpBI vdcClrMode, 2
		BCC SClrMod_7
		TYA
		ORA #%00010000
		TAY
SClrMod_7	TYA				;f302
		JSR SetVDCRegister
		LDX #26
		LDA scr80colors
		JSR SetVDCRegister
		LDX #24
		LDA scr80polar
		JMP SetVDCRegister

SetColorModeTabH				;f316
		!byte >ColorModeTab0, >ColorModeTab1
		!byte >ColorModeTab2, >ColorModeTab3
		!byte >ColorModeTab4

SetColorModeTabL				;f31b
		!byte <ColorModeTab0, <ColorModeTab1
		!byte <ColorModeTab2, <ColorModeTab3
		!byte <ColorModeTab4

ColorModeTab0					;f320
		!byte $04,$20,  $06,$19,  $07,$1c,  $09,$e7
		!byte $14,$38,  $15,$80,  $19,$87,  $24,$f5	;!!! was $19,$80
		!byte $ff

ColorModeTab1					;f331
		!byte $04,$20,  $06,$16,  $07,$1c,  $09,$e7
		!byte $14,$38,  $15,$80,  $19,$c0,  $24,$f5
		!byte $ff

ColorModeTab2					;f342
		!byte $04,$20,  $06,$19,  $07,$1c,  $09,$e7
		!byte $14,$40,  $15,$00,  $19,$c0,  $24,$f5
		!byte $ff

ColorModeTab3					;f353
		!byte $04,$40,  $06,$32,  $07,$38,  $09,$e3
		!byte $14,$40,  $15,$00,  $19,$c0,  $24,$f4
		!byte $ff

ColorModeTab4					;f364
		!byte $04,$80,  $06,$64,  $07,$70,  $09,$e1
		!byte $14,$40,  $15,$00,  $19,$c0,  $24,$f2
		!byte $ff

_ColorCard_					;f375
		PHP
		PHA
		+PushW r3
		LDY r11L
		JSR GetColorAddy
		+PopW r3
		LDY #0
		PLA
		PLP
		BCC ColCrd2
		+bbsf 7, graphMode, ColCrd1
		STA (r5),y
		RTS
ColCrd1		JMP EF578			;f395
ColCrd2		+bbsf 7, graphMode, ColCrd3	;f398
		LDA (r5),y
		RTS
ColCrd3		JMP EF52D			;f39f

ColorModeTabl1	!byte $f8, $f8, $f8, $fc, $fe	;f3a2

GetColorAddy	TYA				;f3a7
		LDY vdcClrMode
		AND ColorModeTabl1,y
		PHA
		STA r5L
		LDA #0
		ASL r5L
		ROL
		ASL r5L
		ROL
		STA r5H
		PLA
		+add r5L
		STA r5L
		BCC GetClrAddy1
		INC r5H
GetClrAddy1	+bbsf 7, graphMode, GetClrAddy2
		+AddVW COLOR_MATRIX, r5
		+bra GetClrAddy6
GetClrAddy2	ASL r5L				;f3d9
		ROL r5H
		LDY vdcClrMode
		CPY #2
		BCC GetClrAddy5
		DEY
GetClrAddy3	DEY				;f3e5
		BEQ GetClrAddy4
		ASL r5L
		ROL r5H
		+bra GetClrAddy3
GetClrAddy4	+AddVB $40, r5H			;f3ef	;!!! >COLOR_MATRIX_80_2
		BNE GetClrAddy6
GetClrAddy5	+AddVW $3880, r5		;f3f8	;!!! COLOR_MATRIX_80_1
GetClrAddy6	LSR r3H				;f405
		ROR r3L
		LSR r3H
		ROR r3L
		LSR r3L
		LDA r3L
		+add r5L
		STA r5L
		BCC *+4
		INC r5H
		RTS

ColorModeTabl2	!byte $08, $08, $08, $04, $02	;f41b

_ColorRectangle_				;f420
		TAX
		+PushW r3
ColRec1		+MoveB r2L, r11L		;f427
		+CmpW r3, r4
		BEQ ColRec2
		BCS ColRec5
ColRec2		+CmpB r11L, r2H			;f439
		BEQ ColRec3
		BCS ColRec4
ColRec3		TXA				;f441
		PHA
		SEC
		JSR _ColorCard_
		PLA
		TAX
		LDY vdcClrMode
		LDA ColorModeTabl2,y
		+add r11L
		STA r11L
		BNE ColRec2
ColRec4		+AddVW 8, r3			;f456
		+bra ColRec1
ColRec5		+PopW r3			;f464
		RTS

VDCSetWordCount					;f46b
		+bbrf 7, dispBufferOn, VDCSetWCEnd
		JSR EF578
		LDA r4L
		+subv 1
		BEQ VDCSetWCEnd
		LDX #30
		STX vdcreg
		BIT vdcreg
		BPL *-3
		STA vdcdata
VDCSetWCEnd	RTS				;f486

VDCGetFromBGFG					;f487
		+bbrf 6, dispBufferOn, VDCGetFromBGFG_1
		LDA (r6),y
		RTS
VDCGetFromBGFG_1				;f48e
		BIT vdcreg
		BPL *-3
		LDA vdcdata
		RTS

;load data (80 col. or backbuffer)
;called from seems-to-be-never-called-function
;f497
EF497		+bbrf 6, dispBufferOn, EF4A0	;f497
		LDY #0
		LDA (r6),y
		RTS
EF4A0		STX EF4EC			;f4a0
		LDX #$AD			;LDA???
		BNE EF4C5

;data || visual (80 col. or backbuffer)
;f4a7
EF4A7		+bbrf 6, dispBufferOn, EF4B0	;f4a7
		LDY #0
		ORA (r6),y
		RTS
EF4B0		STX EF4EC			;f4b0
		LDX #$0d			;ORA???
		BNE EF4C5


;data && visual (80 col. or backbuffer)
;f4b7
EF4B7		+bbrf 6, dispBufferOn, EF4C0	;f4b7
		LDY #0
		AND (r6),y
		RTS
EF4C0		STX EF4EC			;f4c0
		LDX #$2d			;AND???
EF4C5		STX EF4F2			;f4c5
		LDX #18
		STX vdcreg
		LDX r6H
EF4CF		BIT vdcreg			;f4cf
		BPL EF4CF
		STX vdcdata
		LDX #19
		STX vdcreg
		LDX r6L
EF4DE		BIT vdcreg			;f4de
		BPL EF4DE
		STX vdcdata
		LDX #31
		STX vdcreg
EF4EC 	= *+1
		LDX #0
EF4ED		BIT vdcreg			;f4ed
		BPL EF4ED
EF4F2		LDA vdcdata			;f4f2
		RTS

SetVDCRegister					;f4f6
		STX vdcreg
SetVDCReg1	BIT vdcreg			;f4f9
		BPL SetVDCReg1
		STA vdcdata
		RTS

GetVDCRegister					;f502
		STX vdcreg
GetVDCReg1	BIT vdcreg			;f505
		BPL GetVDCReg1
		LDA vdcdata
		RTS

ILin80_Help					;f50e
		+bbsf 7, dispBufferOn, ILin80_Help1
		BVC ILin80_Help1
		LDY #0
		LDA (r5),y
		RTS
ILin80_Help1	BIT vdcreg			;f519
		BPL ILin80_Help1
		LDA vdcdata
		RTS

;called from invertline
;f522
EF522		+bbsf 7, dispBufferOn, EF52D	;f522
		BVC EF52D
		LDY #0
		LDA (r5),y
		RTS
EF52D		STX EF5A4			;f52d
		LDX #$ad
		BNE EF57D

;f534 - this is never refereneced
EF534		+bbsf 7, dispBufferOn, EF53F	;f534
		BVC EF53F
		LDY #0
		ORA (r5),y
		RTS
EF53F		STX EF5A4			;f53f
		LDX #$0d
		BNE EF57D

;f53f - this is never referenced
EF546		+bbsf 7, dispBufferOn, EF551	;f546
		BVC EF551
		LDY #0
		EOR (r5),y
		RTS
EF551		STX EF5A4			;f551
		LDX #$4d
		BNE EF57D

;called from Read/Write80Help
EF558		+bbsf 7, dispBufferOn, EF563	;f558
		BVC EF563
		LDY #0
		AND (r5),y
		RTS
EF563		STX EF5A4			;f563
		LDX #$2d
		BNE EF57D

;called from seems-to-be-never-called function
EF56A		+bbrf 6, dispBufferOn, EF570	;f56a
		STA (r6),y
EF570		BMI EF578			;f570
		RTS

;this is called as one of the last functions in draw
EF573		+bbsf 7, dispBufferOn, EF578	;f573
		RTS
EF578		STX EF5A4			;f578
		LDX #$8d
EF57D		STX EF5AA			;f57d
		LDX #18
		STX vdcreg
		LDX r5H
EF587		BIT vdcreg			;f587
		BPL EF587
		STX vdcdata
		LDX #19
		STX vdcreg
		LDX r5L
EF596		BIT vdcreg			;f596
		BPL EF596
		STX vdcdata
		LDX #31
		STX vdcreg
EF5A4 = *+1
		LDX #0
EF5A5		BIT vdcreg			;f5a5
		BPL EF5A5
EF5AA		LDA vdcdata			;f5aa
		RTS

;another one called only from that one that seems-to-be-never-called
;this one stores to 80col.||backbuffer if needed
;f5ae
EF5AE		+bbrf 6, dispBufferOn, EF5B4	;f5ae
		STA (r6),y
EF5B4		BPL EF5BE			;f5b4
EF5B6		BIT vdcreg			;f5b6
		BPL EF5B6
		STA vdcdata
EF5BE		RTS				;f5be

;called from ILine80, stores only to 80col. if needed
;f5bf
EF5BF		+bbrf 7, dispBufferOn, EF5CB	;f5bf
EF5C3		BIT vdcreg			;f5c3
		BPL EF5C3
		STA vdcdata
EF5CB		RTS				;f5cb

;called many times, stores only to backbuffer if needed
;f5cc
EF5CC		+bbrf 6, dispBufferOn, EF5D4	;f5cc
		LDY #0
		STA (r6),y
EF5D4		RTS				;f5d4

DabsBank0					;f5d5
		LDA zpage+1,X
		BMI DnegateBank0		;!!!hint remove RTS here and: BPL DnegateEnd
		RTS
DnegateBank0	LDA zpage+1,X			;f5da
		EOR #$FF
		STA zpage+1,X
		LDA zpage,X
		EOR #$FF
		STA zpage,X
		INC zpage,X
		BNE DnegateB0End
		INC zpage+1,X
DnegateB0End	RTS				;f5ec

DShiftLeftBank0					;f5ed
		DEY
		BMI DShiftLeftB0End		;!!!hint BMI DnegateEnd
		ASL zpage,X
		ROL zpage+1,X
		JMP DShiftLeftBank0
DShiftLeftB0End	RTS				;f5f7

_GetScanLine_					;f5f8
		+bbrf 7, graphMode, GSC0
		JMP GSC80
GSC0		TXA				;f5ff
		PHA				;!!!hint remove this...
		PHA
		AND #%00000111
		STA r6H
		PLA				;!!!hint ...and replace this by TXA
		LSR
		LSR
		LSR
		TAX
		+bbrf 7, dispBufferOn, GSC2
		BVS GSC1
		LDA LineTabL,X
		ORA r6H
		STA r5L
		LDA LineTabH,X
		STA r5H
		JMP GSC80_6

GSC1		LDA LineTabL,X			;f620
		ORA r6H
		STA r5L
		STA r6L
		LDA LineTabH,X
		STA r5H
		+subv 64
		STA r6H
		PLA
		TAX
		RTS

GSC2		BVC GSC3			;f636
		LDA LineTabL,X
		ORA r6H
		STA r6L
		LDA LineTabH,X
		+subv 64
		STA r6H
		JMP GSC80_5

GSC3		+LoadB r5L, 0			;f64a
		STA r6L
		+LoadB r5H, $AF
		STA r6H
		PLA
		TAX
		RTS

GSC80		TXA				;f659
		PHA
		STX r5H
		LDA #0
		LSR r5H
		ROR
		LSR r5H
		ROR
		STA r5L
		LDX r5H
		STX r6L
		LSR r5H
		ROR
		LSR r5H
		ROR
		+add r5L
		STA r5L
		LDA r6L
		ADC r5H
		STA r5H
		+bbrf 7, dispBufferOn, GSC80_4
		BVS GSC80_1
		+bra GSC80_6
GSC80_1		PLA				;f685
		TAX
GSC80_2		LDA r5H				;f687
		+addv $60
		STA r6H
		+MoveB r5L, r6L
		+CmpWI r6, $7f40
		BCC GSC80_3
		+AddVB $21, r6H
GSC80_3		RTS				;f6a5

GSC80_4		BVC GSC80_6			;f6a6
		JSR GSC80_2
GSC80_5		+MoveW r6, r5			;f6ab
		PLA
		TAX
		RTS

GSC80_6		+MoveW r5, r6			;f6b6
		PLA
		TAX
		RTS

;some math functions, normalize VDC address?
EF6C1		+PushB r3H			;f6c1
		LDA r3L
		AND #%00000111
		PHA
		LDA r3L
		LSR r3H
		ROR
		LSR r3H
		ROR
		LSR r3H
		ROR
		+add r5L
		STA r5L
		STA r6L
		PHP
		LDA r5H
		ADC r3H
		STA r5H
		PLP
		LDA r6H
		ADC r3H
		STA r6H
		PLA
		TAX
		+PopB r3H
		RTS

_SwapMemDiskDrv_				;f6ef
		LDA config			;!!!hint +smbf 0, config
		ORA #1
		STA config
		JSR SMDD_swap0p
		JSR SMDD_doswap
		JSR SMDD_swap0p
		LDA config			;!!!hint +rmbf 0, config
		AND #%11111110
		STA config
		RTS

;!!!hint use 'X' below? will this give more speed?
SMDD_swap0p	LDY #5				;f709
SMDD_swap0p_0	LDA r0L,y			;f70b
		TAX
		LDA SMDD_swaptab,y
		STA r0L,y
		TXA
		STA SMDD_swaptab,y
		DEY
		BPL SMDD_swap0p_0
		RTS

SMDD_swaptab	!word DISK_BASE			;f71d
		!word DISK_SWAPBASE
		!word DISK_DRV_LGH

SMDD_doswap	+PushB r0H			;f723
		+PushB r1H
		+PushB r2H
		LDY #0
SMDD_doswp0	LDA r2H				;f72e
		BEQ SMDD_doswp2
SMDD_doswp1	LDA (r0),y			;f732
		TAX
		LDA (r1),y
		STA (r0),y
		TXA
		STA (r1),y
		INY
		BNE SMDD_doswp1
		INC r0H
		INC r1H
		DEC r2H
		+bra SMDD_doswp0
SMDD_doswp2	CPY r2L				;f748
		BEQ SMDD_doswp3
		LDA (r0),y
		TAX
		LDA (r1),y
		STA (r0),y
		TXA
		STA (r1),y
		INY
		BNE SMDD_doswp2
SMDD_doswp3	+PopB r2H			;f759
		+PopB r1H
		+PopB r0H
		RTS

_AccessCache_					;f763
		LDX #8
AccCache0	LDA r0L-1,x			;f765
		STA AccCacheSv0p-1,x
		DEX
AccCache1	BNE AccCache0			;f76b
		TYA
		CMP #$ff
		BEQ AccCache2
		PHA
		+AddVB >TRACK_CACHE, r1H
		LDY #0
		STY r1L
		STY r2L
		STY r3H
		INY
		STY r2H
		STY r3L
		+MoveW r4, r0
		PLA
		TAY
		JSR _DoBOp_
		TAY
		JSR AccCache4
		TYA
		RTS
AccCache2	+PushB config			;f79a
		+LoadB config, $3f
		+LoadW r1, TRACK_CACHE
AccCache3	LDA #0				;f7ab
		TAY
		STA (r1),y
		INY
		STA (r1),y
		INC r1H
		+CmpBI r1H, (>TRACK_CACHE)+$14
		BCC AccCache3
		+PopB config
AccCache4	LDX #8				;f7bf
AccCache5	LDA AccCacheSv0p-1,x		;f7c1
		STA r0L-1,x
		DEX
		BNE AccCache5
		RTS

		!word 0				;f7ca ;!!!hint
AccCacheSv0p	!word 0, 0, 0, 0		;f7cc

; everything below is copy of GetColorAddy and below to AccessCache
; to fb59
;fc00 - memory swap page
		*= $fc00
SWAP_PAGE =*
;fd00
		*= $fd00

_MoveBData_	LDY #0				;fd00
		BEQ _DoBOp_
_SwapBData_	LDY #2				;fd04
		BNE _DoBOp_
_VerifyBData_	LDY #3				;fd08
		BNE _DoBOp_			;!!!hint remove it
_DoBOp_		+PushB mmu+6			;fd0c
		AND #%11110000
		ORA #%00001000
		STA mmu+6
		+PushB config
		+PushW r0
		+PushW r1
		+PushW r2
		+PushW r3
		LDA r3L
		ROR
		ROR
		ROR
		AND #%11000000
		ORA #%00111111
		STA r3L
		STA config
		LDA r3H
		ROR
		ROR
		ROR
		AND #%11000000
		ORA #%00111111
		STA r3H
		TYA
		AND #%00000011
		BNE DoBOp1
		JMP DoMoveBData
DoBOp1		CMP #2				;fd54
		BNE DoBOp2
		JMP DoSwapBData
DoBOp2		CMP #3				;fd5b
		BNE DoBOp3
		JMP DoVerifyBData
DoBOp3		LDX r0H				;fd62
		LDA r1H
		STX r1H
		STA r0H
		LDX r0L
		LDA r1L
		STX r1L
		STA r0L
		LDX r3L
		LDA r3H
		STX r3H
		STA r3L

DoMoveBData	LDY r2L				;fd7a
		BEQ DoMoveB_4
DoMoveB_1	DEY				;fd7e
		LDA (r0),y
		STA SWAP_PAGE,y
		TYA
		BNE DoMoveB_1
		+MoveB r3H, config
		LDY r2L
DoMoveB_2	DEY				;fd8e
		LDA SWAP_PAGE,y
		STA (r1),y
		TYA
		BNE DoMoveB_2
		+AddB r2L, r0L
		BCC DoMoveB_3
		INC r0H
DoMoveB_3	+AddB r2L, r1L			;fda2
		BCC DoMoveB_4
		INC r1H
DoMoveB_4	LDA r2H				;fdad
		BEQ DoMoveB_7
		LDY #0
		+MoveB r3L, config
DoMoveB_5	LDA (r0),y			;fdb8
		STA SWAP_PAGE,y
		INY
		BNE DoMoveB_5
		+MoveB r3H, config
DoMoveB_6	LDA SWAP_PAGE,y			;fdc5
		STA (r1),y
		INY
		BNE DoMoveB_6
		INC r0H
		INC r1H
		DEC r2H
		+bra DoMoveB_4
DoMoveB_7	JMP DoBOpEnd			;fdd6

DoSwapBData	LDY r2L				;fdd9
		BEQ DoSwapB_5
DoSwapB_1	DEY				;fddd
		LDA (r0),y
		STA SWAP_PAGE,y
		TYA
		BNE DoSwapB_1
		+MoveB r3H, config
		LDY r2L
DoSwapB_2	DEY				;fded
		LDA SWAP_PAGE,y
		TAX
		LDA (r1),y
		STA SWAP_PAGE,y
		TXA
		STA (r1),y
		TYA
		BNE DoSwapB_2
		+MoveB r3L, config
		LDY r2L
DoSwapB_3	DEY				;fe04
		LDA SWAP_PAGE,y
		STA (r0),y
		TYA
		BNE DoSwapB_3
		+AddB r2L, r0L
		BCC DoSwapB_4
		INC r0H
DoSwapB_4	+AddB r2L, r1L			;fe18
		BCC DoSwapB_5
		INC r1H
DoSwapB_5	LDA r2H				;fe23
		BEQ DoSwapB_9
		LDY #0
		+MoveB r3L, config
DoSwapB_6	LDA (r0),y			;fe2e
		STA SWAP_PAGE,y
		INY
		BNE DoSwapB_6
		+MoveB r3H, config
DoSwapB_7	LDA SWAP_PAGE,y			;fe3b
		TAX
		LDA (r1),y
		STA SWAP_PAGE,y
		TXA
		STA (r1),y
		INY
		BNE DoSwapB_7
		+MoveB r3L, config
DoSwapB_8	LDA SWAP_PAGE,y			;fe4f
		STA (r0),y
		INY
		BNE DoSwapB_8
		INC r0H
		INC r1H
		DEC r2H
		+bra DoSwapB_5
DoSwapB_9	+bra DoBOpEnd			;fe60

DoVerifyBData	LDY r2L				;fe63
		BEQ DoVerB_4
DoVerB_1	DEY				;fe67
		LDA (r0),y
		STA SWAP_PAGE,y
		TYA
		BNE DoVerB_1
		+MoveB r3H, config
		LDY r2L
DoVerB_2	DEY				;fe77
		LDA SWAP_PAGE,y
		CMP (r1),y
		BNE DoVerB_7
		TYA
		BNE DoVerB_2
		+AddB r2L, r0L
		BCC DoVerB_3
		INC r0H
DoVerB_3	+AddB r2L, r1L			;fe8d
		BCC DoVerB_4
		INC r1H
DoVerB_4	LDA r2H				;fe98
		BEQ DoVerB_7
		LDY #0
		+MoveB r3L, config
DoVerB_5	LDA (r0),y			;fea3
		STA SWAP_PAGE,y
		INY
		BNE DoVerB_5
		+MoveB r3H, config
DoVerB_6	LDA SWAP_PAGE,y			;feb0
		CMP (r1),y
		BNE DoVerB_7
		INY
		BNE DoVerB_6
		INC r0H
		INC r1H
		DEC r2H
		+bra DoVerB_4
DoVerB_7	BEQ DoVerB_8			;fec3
		LDX #$ff
		BNE DoBOpEnd
DoVerB_8	LDX #0				;fec9
DoBOpEnd	+PopW r3			;fecb
		+PopW r2
		+PopW r1
		+PopW r0
		+PopB config
		+PopB mmu+6
		TXA
		RTS
;feec
;the rest seems unused
;ff00-ff05 - MMU
		*=$ff05
;ff00 - 5 MMU bytes
;		!byte $7f, $00, $00, $00, $00

IRQHandler					;ff05
		CLD
		PHA
		+PushB config
		+LoadB config, CIOIN
		+PushB mmu+6
		AND #%11110000
		STA mmu+6
		NOP
		NOP
		NOP
		+PopB mmu+6
		+PopB config
		PLA
EndInterrupt	RTI				;ff25

;normalize address?
EFF26		LDA zpage+1,x			;ff26
		BPL EFF3D
		ROL
		BMI EFF4F
		ROR
		+bbrf 7, graphMode, EFF38
		+addv $60
		ROL zpage,x
		ROL
EFF38		AND #$1f			;ff38
		STA zpage+1,x
		RTS
EFF3D		ROL				;ff3d
		BPL EFF4F
		ROR
		+bbrf 7, graphMode, EFF4B
		SEC
		ADC #$a0
		ROL zpage,x
		ROL
EFF4B		ORA #$e0			;ff4b
		STA zpage+1,x
EFF4F		RTS				;ff4f

						;ff50
LineTabL	!byte $00, $40, $80, $c0, $00, $40, $80, $c0
		!byte $00, $40, $80, $c0, $00, $40, $80, $c0
		!byte $00, $40, $80, $c0, $00, $40, $80, $c0
		!byte $00
						;ff69
LineTabH	!byte $a0, $a1, $a2, $a3, $a5, $a6, $a7, $a8
		!byte $aa, $ab, $ac, $ad, $af, $b0, $b1, $b2
		!byte $b4, $b5, $b6, $b7, $b9, $ba, $bb, $bc
		!byte $be
;ff8a
;some more junk...
;		!word 1				;fff8
;		!word EndInterrupt		;fffa
;		!word EndInterrupt		;fffc
;		!word IRQHandler		;fffe
;ffff+1
